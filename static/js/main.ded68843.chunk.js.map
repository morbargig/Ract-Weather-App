{"version":3,"sources":["components/Menu.jsx","config/apiKey.js","components/HeaderResult.jsx","components/ForecastResult.jsx","components/Home.jsx","components/Favorites.jsx","components/Temperature.jsx","App.jsx","serviceWorker.js","stores/favoritesStore.js","index.js"],"names":["Menu","darkMode","className","to","onClick","apiKey","Date","getHours","HeaderResult","inject","observer","props","componentDidMount","isFavorite","FavoritesStore","isFavorites","cityKey","console","log","setState","addToFavorites","key","name","addFavorite","cityName","removeFromFavorites","a","async","rmoveFavorites","state","this","countryName","class","Component","ForecastResult","data","Key","getForecastData","undefined","forecastData","axios","get","res","DailyForecasts","map","x","moment","format","Day","IconPhrase","src","Icon","toString","length","alt","Night","isFahrenheit","Temperature","Minimum","Value","Maximum","Math","floor","parseInt","Home","handelChange","e","target","value","id","letters","match","english","alert","parentElement","listOfCities","displeyCity","selectedCity","find","i","LocalizedName","onChange","todo","Country","type","list","style","marginLeft","Favorites","checkForLocalStorage","getAllFavorites","push","getFavoritesData","checkForDuplicates","array","FavoritesData","showFullForecast","popUp","closePopUp","prevState","splice","d","WeatherIcon","WeatherText","Imperial","handleTemperture","App","UNSAFE_componentWillMount","navigator","watchID","setLightMode","n","geolocation","watchPosition","geo_success","geo_error","enableHighAccuracy","maximumAge","timeout","position","l","coords","latitude","longitude","currentLocation","error","code","message","path","exact","render","Boolean","window","location","hostname","favoritesStore","localStorage","getItem","favorites","JSON","parse","observable","computed","action","obj","LSfavorites","setItem","stringify","favoritesKey","favorite","filter","stores","ReactDOM","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ded68843.chunk.js","sourcesContent":["import { Link } from 'react-router-dom'\r\nimport React from \"react\"\r\nimport '../css/Menu.css'\r\n\r\nexport const Menu = ({ darkMode }) => {\r\n  return (\r\n    <div className=\"mynavbar\">\r\n\r\n      <Link to=\"/\"  >\r\n        <div className=\"navbarOptions\">Home</div>\r\n      </Link>\r\n\r\n      <Link to=\"/Favorites\"  >\r\n        <div className=\"navbarOptions\">Favorites</div>\r\n      </Link>\r\n\r\n      <div onClick={darkMode} className=\"navbarOptions\">\r\n        <i className=\"fas fa-adjust\"></i>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\n","const apiKey = function () {\r\n    let d = new Date();\r\n    let n = d.getHours();\r\n    if (n % 2 === 0) {\r\n        return 'sRf6W9AUW0u6DFJQ2zVkLhQb3g78OHaS'\r\n    } else { return 'mmcKE4Fm52FJgC7xpSPh15ygPzWqAoQ9' }\r\n}\r\n\r\n\r\nexport default apiKey()","import React, { Component } from 'react';\r\nimport { observer, inject } from 'mobx-react'\r\n\r\n@inject(\"FavoritesStore\")\r\n\r\n@observer\r\nclass HeaderResult extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.isFavorite()\r\n    }\r\n\r\n    isFavorite = () => {\r\n        let isFavorite = this.props.FavoritesStore.isFavorites(this.props.cityKey)\r\n        console.log(isFavorite)\r\n        let cityKey = this.props.cityKey\r\n        this.setState({ isFavorite, cityKey })\r\n    }\r\n\r\n\r\n    addToFavorites = (key, name) => {\r\n        this.props.FavoritesStore.addFavorite({ cityKey: key, cityName: name })\r\n        this.setState({ isFavorite: true })\r\n    }\r\n\r\n    removeFromFavorites = async (key) => {\r\n        this.props.FavoritesStore.rmoveFavorites(key)\r\n        this.setState({ isFavorite: false })\r\n    }\r\n\r\n    render() {\r\n        let cityName = this.props.cityName\r\n        let cityKey = this.props.cityKey\r\n        if (this.state.cityKey !== cityKey) {\r\n            this.isFavorite()\r\n        }\r\n        return (\r\n            <div className=\"tableHeaders\">\r\n                <div className=\"locationName\"> {cityName} ,{this.props.countryName}</div>\r\n                {!this.state.isFavorite ?\r\n                    <button className=\"favorite\" onClick={() => this.addToFavorites(cityKey, cityName)}> <i class=\"fa fa-bookmark\"></i> </button>\r\n                    :\r\n                    <button className=\"delete\" onClick={() => this.removeFromFavorites(cityKey)}><i class=\"fa fa-trash\"></i> </button>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default HeaderResult;","import React, { Component } from 'react';\r\n// import iconsData from './IconsData'\r\nimport moment from 'moment'\r\nimport axios from 'axios'\r\nimport { observer, inject } from 'mobx-react'\r\nimport apiKey from '../config/apiKey';\r\n\r\n\r\n@inject(\"FavoritesStore\")\r\n\r\n@observer\r\nclass ForecastResult extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        let cityKey = this.props.data.Key\r\n        this.getForecastData(cityKey)\r\n    }\r\n\r\n    getForecastData = async (cityKey) => {\r\n        if (this.state.forecastData === undefined) {\r\n            let res = await axios.get(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${cityKey}?apikey=${apiKey}`)\r\n            console.log(res.data.DailyForecasts)\r\n            this.setState({ forecastData: res.data.DailyForecasts })\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n\r\n\r\n            <div class=\"ForcastColumn\">\r\n\r\n                {this.state.forecastData ? this.state.forecastData.map(x =>\r\n                    <div class=\"eachColumn\">\r\n                        <div class=\"fullDate\"> {moment(x.Date).format('dddd')} - {moment(x.Date).format('MMM Do')}</div>\r\n\r\n                        <div class=\"DayAndNight\">\r\n                            <div class=\"dayPhrase\"> {x.Day.IconPhrase} </div>\r\n                            <div class=\"dayPic\"><img src={`https://developer.accuweather.com/sites/default/files/${x.Day.Icon.toString().length === 1 ? \"0\" + x.Day.Icon : x.Day.Icon}-s.png`}  alt=\"\"/> </div>\r\n                            <div class=\"nightPhrase\"> {x.Night.IconPhrase} </div>\r\n                            {console.log(x.Day.Icon, typeof (x.Day.Icon), x.Day.Icon.toString().length)}\r\n                            {console.log(x.Night.Icon, typeof (x.Night.Icon), x.Night.Icon.toString().length)}\r\n                            <div class=\"nightPic\"><img src={`https://developer.accuweather.com/sites/default/files/${x.Night.Icon.toString().length === 1 ? \"0\" + x.Night.Icon : x.Night.Icon}-s.png`} alt=\"\" /> </div>\r\n                        </div>\r\n                        <div class=\"temperature\"> {this.props.isFahrenheit ? x.Temperature.Minimum.Value / x.Temperature.Maximum.Value : Math.floor((parseInt(x.Temperature.Minimum.Value) - 32) / 1.8)} / {Math.floor((parseInt(x.Temperature.Maximum.Value) - 32) / 1.8)}</div>\r\n                    </div>) : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ForecastResult;","import React, { Component } from 'react';\r\nimport axios from 'axios'\r\nimport apiKey from '../config/apiKey'\r\nimport HeaderResult from './HeaderResult';\r\nimport ForecastResult from './ForecastResult';\r\nconsole.log(apiKey)\r\nclass Home extends Component {\r\n  state = {}\r\n\r\n  handelChange = async (e) => {\r\n    let name = e.target.name\r\n    let value = e.target.value\r\n    let key = e.target.key\r\n    let id = e.target.id\r\n    let letters = /^[A-Z a-z]+$/i;\r\n    let english\r\n    if (value.match(letters)) {\r\n      english = true;\r\n    }\r\n    else {\r\n      alert(\"english letters only\");\r\n      english = false;\r\n    }\r\n    console.log(value, name, key, id, e.target.parentElement)\r\n    if (value !== \"\" && english === true) {\r\n      const res = await axios.get(`https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${apiKey}&q=${value}`)\r\n      console.log(res.data)\r\n      let listOfCities = res.data\r\n      this.setState({ value, listOfCities })\r\n    } else { this.setState({ value: '' }) }\r\n  }\r\n\r\n  displeyCity = async () => {\r\n    let selectedCity = this.state.listOfCities.find(i => i.LocalizedName === this.state.value)\r\n    // let id = selectedCity.Key\r\n    // console.log(id,this.state.listOfCities,this.state.value)\r\n    // https://dataservice.accuweather.com/currentconditions/v1/locationKey?apikey=${apiKey}&locationkey=${id}&details=true\r\n    // const res = await axios.get(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/locationKey?apikey=${apiKey}&locationkey=${id}&details=true&metric=true`)\r\n    // console.log(res.data, id)\r\n    this.setState({ selectedCity })\r\n    console.log(selectedCity)\r\n\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return <div>\r\n      {this.state.listOfCities ?\r\n        <datalist name=\"dataList\" id=\"browsers\" onChange={this.todo}  >\r\n          {this.state.listOfCities.map(i =>\r\n            <option id={i.Key} key={i.Key} value={i.LocalizedName}> {i.Country.LocalizedName} </option>\r\n          )}   </datalist> : null}\r\n      <input type=\"text\" list=\"browsers\" name=\"browser\" value={this.state.value} onChange={this.handelChange} className=\"col-sm-6 custom-select custom-select-sm\" style={{ marginLeft: 10 + \"%\" }} >\r\n      </input>\r\n      <button onClick={this.displeyCity} className=\"btn aqua-gradient btn-rounded btn-sm my-0\" type=\"submit\">Search</button>\r\n      {this.state.selectedCity ?\r\n        <div>\r\n          <HeaderResult cityName={this.state.selectedCity.LocalizedName} countryName={this.state.selectedCity.Country.LocalizedName} cityKey={this.state.selectedCity.Key} />\r\n          <ForecastResult data={this.state.selectedCity} isFahrenheit={this.props.isFahrenheit} />\r\n        </div> : null\r\n      }\r\n\r\n    </div>\r\n  }\r\n\r\n}\r\n// 2 The main screen (weather details) will be composed of a search field to search a\r\n// location’s weather by city name. And below it, the current weather and a 5-day forecast of\r\n// the searched location. A location should have an indication if it’s already saved in\r\n// favorites, and a button to add/remove from favorites (it can be the same button).\r\n\r\n// 3 Display Tel Aviv weather by default.\r\n\r\n// 5. Searching should be done in English letters only\r\n\r\n// B. 3. Add Celsius/Fahrenheit toggle button.\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\n// import PopUp from './PopUp'\r\nimport axios from 'axios'\r\nimport apiKey from '../config/apiKey';\r\nimport { observer, inject } from 'mobx-react'\r\nimport { observable } from 'mobx';\r\n\r\n\r\n@inject(({ FavoritesStore }) => {\r\n  return FavoritesStore\r\n})\r\n// @inject(\"FavoritesStore\")\r\n@observer\r\nclass Favorites extends Component {\r\n\r\n  state = {}\r\n\r\n  componentDidMount = () => {\r\n    this.checkForLocalStorage()\r\n  }\r\n  checkForLocalStorage = () => {\r\n    // console.log( this.props.FavoritesStore.allFavorites() , )\r\n    // console.log(\r\n    let Favorites = []\r\n    this.props.FavoritesStore.getAllFavorites.map(i => Favorites.push(i))\r\n    this.setState({\r\n      Favorites\r\n    }\r\n      , function () { console.log(this.state.Favorites) }\r\n    )\r\n    // )\r\n    // @computed  get favorites (){\r\n\r\n    //  return this.props.FavoritesStore.allFavorites()\r\n    // } \r\n    this.getFavoritesData(Favorites)\r\n  }\r\n  checkForDuplicates = (array) => {\r\n    // for (let i = 0; i < array.length; i++) {\r\n    //   for (let j = i + 1; j < array.length; j++) {\r\n    //     if (array[i].cityKey === array[j].cityKey) {\r\n    //       array.splice(j, 1)\r\n    //     }\r\n    //   }\r\n    // }\r\n    // let favorites = JSON.stringify(array)\r\n    // localStorage.setItem('favorites', favorites)\r\n    // this.getFavoritesData(array)\r\n  }\r\n  getFavoritesData = async (array) => {\r\n\r\n    let FavoritesData = []\r\n    for (let i of array) {\r\n      let res = await axios.get(`https://dataservice.accuweather.com/currentconditions/v1/${i.cityKey}?apikey=${apiKey}`)\r\n      // console.log(response)\r\n      FavoritesData.push({ cityName: i.cityName, cityKey: i.cityKey, res: res.data })\r\n    }\r\n    console.log(FavoritesData)\r\n    this.setState({ FavoritesData: FavoritesData })\r\n  }\r\n  showFullForecast = (key) => {\r\n    if (!this.state.popUp) {\r\n      this.setState({ cityKey: key, popUp: true })\r\n    }\r\n  }\r\n  closePopUp = () => {\r\n    this.setState({ cityKey: null, popUp: false })\r\n  }\r\n  removeFromFavorites = (key, i) => {\r\n    this.props.FavoritesStore.rmoveFavorites(key)\r\n    // console.log(this.state.FavoritesData)\r\n    // let FavoritesData = [...this.state.FavoritesData]\r\n    // console.log(FavoritesData)\r\n    // FavoritesData.splice(i, 1);  \r\n    // FavoritesData.filter(i => i.cityKey !== key)\r\n    // console.log(FavoritesData)\r\n      this.setState(prevState => ({\r\n        FavoritesData: prevState.FavoritesData.splice(i, 1)\r\n      }))\r\n    // this.setState({\r\n    //     FavoritesData \r\n    //   }\r\n    //   , function () { console.log(this.state.FavoritesData) }\r\n    //   )\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n\r\n        {this.state.FavoritesData ?\r\n          <div className=\"FavoritesContainer\">\r\n            {this.state.FavoritesData.map((d,i) =>\r\n              <div key={d.cityKey}>\r\n                {console.log(d)}\r\n                <div className=\"FavoritesData\" onClick={() => this.showFullForecast(d.cityKey,i)} >\r\n                  <div className=\"FavCity\"> {d.cityName} </div>\r\n                  <img class=\"FavPic\" src={`https://developer.accuweather.com/sites/default/files/${d.res[0].WeatherIcon.toString().length === 1 ? \"0\" + d.res[0].WeatherIcon : d.res[0].WeatherIcon}-s.png`} />\r\n                  <div className=\"FavPhrase\"> {d.res[0].WeatherText} </div>\r\n\r\n                  <div className=\"FavTemp\" >\r\n                    {!this.props.isFahrenheit ? Math.floor((parseInt(d.res[0].Temperature.Imperial.Value) - 32) / 1.8) : d.res[0].Temperature.Imperial.Value}\r\n                  </div>\r\n                </div>\r\n                <div><button class=\"FavRemove\" onClick={() => this.removeFromFavorites(d.cityKey,i)}><i class=\"fa fa-trash\"></i> </button> </div>\r\n              </div>\r\n            )\r\n            } </div>\r\n          : null}\r\n\r\n        {/* {this.state.popUp ? <div> <PopUp DegOption={this.state.DegOption} cityKey={this.state.cityKey} closePopUp={this.closePopUp} /> </div> : null} */}\r\n      </div>\r\n\r\n    )\r\n  }\r\n}\r\n\r\n//   4. Favorites screen will be composed of a list of favorite locations. Each location should\r\n//   have an ID, name and current weather. Clicking on a favorite will navigate to the main\r\n//   screen showing the details of that location.\r\n\r\n\r\n\r\nexport default Favorites;\r\n","import React from \"react\"\r\nimport '../css/Temperature.css'\r\n\r\nexport const Temperature = ({ handleTemperture, isFahrenheit }) => {\r\n  return (\r\n    <div className=\"degrees\">\r\n    <div className=\"temperature\"><button className={!isFahrenheit ? \"putAnUnderline\" : null } onClick={handleTemperture}>C</button> / <button className={isFahrenheit ? \"putAnUnderline\" : null } onClick={handleTemperture}>F</button> </div> \r\n</div>\r\n  )\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport { observer } from 'mobx-react'\r\nimport { Menu } from './components/Menu';\r\nimport Home from './components/Home';\r\nimport Favorites from './components/Favorites';\r\nimport { Temperature } from './components/Temperature';\r\n\r\n@observer\r\nclass App extends Component {\r\n  state = {\r\n\r\n  }\r\n  UNSAFE_componentWillMount = () => {\r\n    if (\"geolocation\" in navigator) {\r\n      this.watchID()\r\n    }\r\n    this.setLightMode()\r\n  }\r\n\r\n  setLightMode = () => {\r\n    var d = new Date();\r\n    var n = d.getHours();\r\n    // console.log(d,n)\r\n    if (n > 6 && n < 16) {\r\n\r\n    } else { this.setState({ darkMode: true }) }\r\n  }\r\n  darkMode = () => {\r\n    this.setState(prevState => ({\r\n      darkMode: !prevState.darkMode\r\n    }))\r\n\r\n  }\r\n\r\n  watchID = () => {\r\n    let geo_options = {\r\n      enableHighAccuracy: true,\r\n      maximumAge: 30000,\r\n      timeout: 27000\r\n    };\r\n\r\n    navigator.geolocation.watchPosition(this.geo_success, this.geo_error, geo_options)\r\n  }\r\n\r\n  geo_success = (position) => {\r\n    let l = position.coords\r\n    console.log(l.latitude, l.longitude);\r\n    this.setState({ currentLocation: { latitude: l.latitude, longitude: l.longitude } })\r\n  }\r\n  geo_error = (error) => {\r\n    alert('ERROR(' + error.code + '): ' + error.message);\r\n  }\r\n\r\n  handleTemperture = () => {\r\n    this.setState(prevState => ({\r\n      isFahrenheit: !prevState.isFahrenheit\r\n    }))\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className={this.state.darkMode ? \"darkMode\" : null}>\r\n        <Router >\r\n          <Menu darkMode={this.darkMode} />\r\n          <Temperature handleTemperture={this.handleTemperture} isFahrenheit={this.state.isFahrenheit} />\r\n          <Route path=\"/\" exact render={() => <Home  isFahrenheit={this.state.isFahrenheit}/>} />\r\n          <Route path=\"/Favorites\" render={() => <Favorites isFahrenheit={this.state.isFahrenheit}/>} />\r\n        </Router >\r\n      </div>\r\n\r\n    );\r\n  }\r\n  // 6. State management is a must!\r\n  // 7. Responsive design is a must! (flexbox/grid will give you extra points 😉).\r\n  // 8. Error handling is a must! (can be done with toast, modal).\r\n\r\n  // B. 2. Add dark/light theme support (add toggle button in the header).\r\n  // B. 4. Add animations (with good taste).\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { observable, computed, action } from 'mobx';\r\n\r\nexport class favoritesStore {\r\n    @observable favorites = []\r\n\r\n    @computed get getAllFavorites() {\r\n        let LSfavorites = localStorage.getItem('favorites')\r\n        if (LSfavorites) {\r\n            let favorites = JSON.parse(localStorage.getItem('favorites'))\r\n            this.favorites = favorites\r\n            console.log(favorites)\r\n            return favorites\r\n        }\r\n    }\r\n    // @action allFavorites() {\r\n\r\n    // }\r\n\r\n    @action addFavorite = async (obj) => {\r\n        this.favorites.push(obj)\r\n        console.log(this.favorites, obj)\r\n        console.log(obj)\r\n        let LSfavorites = localStorage.getItem('favorites') ? JSON.parse(localStorage.getItem('favorites')) : []\r\n        await LSfavorites.push(obj)\r\n        console.log(LSfavorites)\r\n        localStorage.setItem('favorites', JSON.stringify(LSfavorites))\r\n    }\r\n\r\n    @action rmoveFavorites = (favoritesKey) => {\r\n        let favorite = this.favorites.filter(i => i.key !== favoritesKey)\r\n        this.favorites = favorite\r\n\r\n        let LSfavorites = JSON.parse(localStorage.getItem('favorites'))\r\n        for (let i = 0; i < LSfavorites.length; i++) {\r\n            let fav = LSfavorites[i]\r\n            if (fav.cityKey === favoritesKey) {\r\n                LSfavorites.splice(i, 1)\r\n            }\r\n        }\r\n        LSfavorites = JSON.stringify(LSfavorites)\r\n        localStorage.setItem('favorites', LSfavorites)\r\n    }\r\n\r\n    @action isFavorites = (favoritesKey) => {\r\n        let isFavorites\r\n        let favorites\r\n        if (localStorage.getItem('favorites')) {\r\n            console.log(\"1\")\r\n            let LSfavorites = JSON.parse(localStorage.getItem('favorites'))\r\n            for (let i = 0; i < LSfavorites.length; i++) {\r\n                console.log(\"2\")\r\n                let fav = LSfavorites[i]\r\n                if (fav.cityKey === favoritesKey) {\r\n                    console.log(\"3\")\r\n                    isFavorites = true\r\n                    favorites = LSfavorites\r\n                    this.favorites = favorites\r\n                } \r\n            }\r\n        } else {\r\n            console.log(\"4\")\r\n            isFavorites = false\r\n            isFavorites = this.favorites.filter(i => i.key === favoritesKey)\r\n            isFavorites.length !== 0 ? isFavorites = true : isFavorites = false\r\n        }\r\n        return isFavorites\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'mobx-react'\r\nimport { favoritesStore } from './stores/favoritesStore'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nconst FavoritesStore = new favoritesStore()\r\n\r\nconst stores = {\r\n    FavoritesStore\r\n}\r\nReactDOM.render(<Provider {...stores}>\r\n    <App />\r\n</Provider>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n\r\n\r\n"],"sourceRoot":""}